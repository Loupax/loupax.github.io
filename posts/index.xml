<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Konstantinos Loupasakis</title>
    <link>/posts/</link>
    <description>Konstantinos Loupasakis (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Mar 2021 21:57:26 +0100</lastBuildDate>
    
    <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Let&#39;s talk sex</title>
      <link>/posts/the_sex_talk/</link>
      <pubDate>Sat, 27 Mar 2021 21:57:26 +0100</pubDate>
      
      <guid>/posts/the_sex_talk/</guid>
      <description>&lt;p&gt;I think it is time we had the sex talk. Please have a seat. I will try to keep
it short and to the point, but it is of outmost importance we have this
talk sooner rather than later. It&amp;rsquo;s an uncomfortable subject, but I swear the
payoff will be worth it.&lt;/p&gt;
&lt;p&gt;Ready?&lt;br&gt;
Ok.&lt;/p&gt;
&lt;p&gt;Sex is like talking. When people want to make an idea they talk about it until
they reach a conclusion.&lt;/p&gt;
&lt;p&gt;Sometimes they talk with themselves which is all fun and good but there&amp;rsquo;s a limit on how
much you can get out of it.&lt;/p&gt;
&lt;p&gt;Sometimes it involves one person surrounded by a crowd, which can be great if
the speaker is talented and engaging enough but it&amp;rsquo;s more of a one way thing.&lt;/p&gt;
&lt;p&gt;And &lt;em&gt;sometimes&lt;/em&gt; groups gather so they can talk together, usually groups of
two but it can involve more people. For those cases, the term used to describe the act
is &amp;ldquo;&lt;em&gt;to perform discourse&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Discourse is a magical act. It is how people give birth to, and raise, their
ideas and while that is the closest thing it has to a purpose, it is not confined by it.&lt;/p&gt;
&lt;p&gt;Some people use discourse just for the fun of it and they do just fine; the connection
with another being can be it&amp;rsquo;s own reward after all. Others do it only to spit their
idea in someone&amp;rsquo;s face which of course can be very rude unless the other one is
into that.&lt;br&gt;
Some people care about the journey, some people focus on reaching a conclusion
as quickly and in as few words as possible.&lt;/p&gt;
&lt;p&gt;Most people claim to be good at it, but almost all of them are liars. The world would be
a better place if everyone just came to peace with that and stopped treating discourse
like a competitive sport and accept the fact that, like in every other skill most
people are mediocre on it. That it can be good enough as long as all participants
are having fun.&lt;br&gt;
There&amp;rsquo;s no need to make up stories about how you totally won that debate
against that girl from another town that nobody from your common circle happens
to know about. It&amp;rsquo;s fine.&lt;/p&gt;
&lt;p&gt;Another myth about discourse is that it awesome and great at all times, but
thats very far from the truth.
In reality the more enjoyable a discourse session is, the more likely it is for
all it&amp;rsquo;s participants to be deeply ashamed about it afterwards.
You see, good discourse is not about showing off and flexing your oratory
muscles. Good discourse is about communication and exposing your beliefs naked
for everyone to see.
Good discourse is about starting with small prods on your partners mind to see
what makes them move, and once they open up letting them do the same to you.
And keeping doing this until your ideas become one, and with each word you fill
a gap on their head, with each word you accept their inner world into yours and
you keep exploring the concepts and then&amp;hellip;&lt;/p&gt;
&lt;p&gt;You reach a conclusion. Panting and satisfied. Maybe a bit dehydrated. Just
realizing that the words that came out of your mouth sounded dumb and silly,
maybe even disgusting and gross.
But it doesn&amp;rsquo;t matter, because you allowed yourself to become vulnerable for
someone else.&lt;/p&gt;
&lt;p&gt;And for this moment everything is good.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>When PHP garbage collector breaks your stuff</title>
      <link>/posts/php_when_gc_breaks_your_stuff/</link>
      <pubDate>Sat, 15 Aug 2020 15:54:41 +0300</pubDate>
      
      <guid>/posts/php_when_gc_breaks_your_stuff/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foreach($obj-&amp;gt;getIterator() as $item){}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$iterator = $obj-&amp;gt;getIterator();
foreach($iterator as $item){}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;do not necessarily have the same behaviour.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A colleague of mine has been working on a project that uses LDAP. Everything was fine and great until he deployed the application to production he started receiving this error message:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Could not rewind entries array&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;So when he showed the issue to the rest of the team we did what everyone in their right minds would do; start debugging the framework by adding &lt;code&gt;die()&lt;/code&gt; statements here and there. After some hacking, we ended up inside this piece of code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public function rewind()
{
    $this-&amp;gt;current = ldap_first_entry($this-&amp;gt;connection, $this-&amp;gt;search);
    if (false === $this-&amp;gt;current) {
        throw new LdapException(sprintf(&#39;Could not rewind entries array: %s&#39;, ldap_error($this-&amp;gt;connection)));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The funny thing was that while &lt;code&gt;$this-&amp;gt;current&lt;/code&gt; was &lt;code&gt;FALSE&lt;/code&gt; and caused the function to throw an &lt;code&gt;LdapException&lt;/code&gt;, &lt;code&gt;ldap_error($this-&amp;gt;connection)&lt;/code&gt; returned the string ‘Success’. Huh.&lt;/p&gt;
&lt;p&gt;After spending too much time making changes and seeing what breaks, suddenly the application started working correctly, seemingly without any real changes to the code.&lt;/p&gt;
&lt;p&gt;Here is the change that apparently fixed everything:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /**
  * @return \Symfony\Component\Ldap\Adapter\CollectionInterface
  */
  public function getResults($query)
  {
      $this-&amp;gt;ldap-&amp;gt;bind($this-&amp;gt;searchDn, $this-&amp;gt;searchPassword);
          $search = $this-&amp;gt;ldap-&amp;gt;query($this-&amp;gt;baseDn, $query);
      return $search-&amp;gt;execute();
  }

 /**
  * BROKEN
  */
  public function getAllUsers()
  {
      foreach ($this-&amp;gt;getResults($this-&amp;gt;allUsersQuery) as $ldapUser) {
           $results[] = $this-&amp;gt;extractUserInfo($ldapUser);
      }
      return $results;
  }

 /**
  * WORKING
  */
  public function getAllUsers()
  {
      $queryResults = $this-&amp;gt;getResults($this-&amp;gt;allUsersQuery);
      foreach ($queryResults as $ldapUser) {
           $results[] = $this-&amp;gt;extractUserInfo($ldapUser);
      }
      return $results;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Do you see the difference between these two functions? I certainly don&amp;rsquo;t! What I can see that in the first we iterate the returned CollectionInterface directly inside the for loop, and in the second we assign it to a variable first, but it shouldn’t have an effect, right?&lt;/p&gt;
&lt;p&gt;Well spoiler alert, it does.&lt;/p&gt;
&lt;p&gt;I’m not 100% sure, but I’m suspecting a garbage collector releasing the query result before the iterator gets a chance to rewind.&lt;/p&gt;
&lt;p&gt;Must investigate more.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to efficiently trigger file downloads in PHP</title>
      <link>/posts/efficient_downloads_in_php/</link>
      <pubDate>Sat, 15 Aug 2020 15:30:24 +0300</pubDate>
      
      <guid>/posts/efficient_downloads_in_php/</guid>
      <description>&lt;p&gt;Making a download happen in PHP is dead simple: Just set your Content-Type and send it&amp;rsquo;s contents to the client through the standard output, usually with the use of &lt;code&gt;echo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is what you want to avoid when you try doing that.&lt;/p&gt;
&lt;p&gt;Here is how I used to do it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;header(&#39;Content-Type: application/octet-stream&#39;);
header(&#39;Content-Transfer-Encoding: Binary&#39;);
header(&#39;Content-disposition: attachment; filename=&amp;quot;&#39; . basename($file_location) . &#39;&amp;quot;&#39;);
echo file_get_contents($file_location);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This might work fine for small files but there is a caveat: It will load the entire file to memory, which sooner or later will bring your server to it&amp;rsquo;s knees.&lt;br&gt;
Here is a more memory-efficient way to do it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;header(&#39;Content-Type: application/octet-stream&#39;);
header(&#39;Content-Transfer-Encoding: Binary&#39;);
header(&#39;Content-disposition: attachment; filename=&amp;quot;&#39; . basename($file_location) . &#39;&amp;quot;&#39;);
readfile($file_location);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The difference between the two snippets is a subtle, but important one: &lt;code&gt;file_get_contents&lt;/code&gt; returns all the contents of the file into a single string. Which, in turn, means that if our file is, say 1GB, we have used 1GB of our server RAM just so that we can echo our file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;readfile&lt;/code&gt; on the other hand echoes the files, without having to load the entire thing in memory; it internally goes through the file and echoes it’s contents with minimal memory footprint.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>First</title>
      <link>/posts/first/</link>
      <pubDate>Thu, 06 Aug 2020 12:27:59 +0300</pubDate>
      
      <guid>/posts/first/</guid>
      <description>&lt;p&gt;Once upon a time there was a little blog.&lt;br&gt;
Full of potential.&lt;br&gt;
Empty of words.&lt;/p&gt;
&lt;p&gt;This is not a forgotten draft. This is a reminder, a ghost of the days of procratination.&lt;br&gt;
If you read this it can mean two things. Either I never bother adding enough words in the word-machine, or you are a dedicaded reader, a blog archaiologist digging through the archives for long forgotten knowledge.&lt;/p&gt;
&lt;p&gt;Hope the easter egg you found was worth it 😊&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
